name: Investigate POTUS Tournament Access

on:
  workflow_dispatch:

jobs:
  investigate_potus_tournament_job:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install forecasting-tools python-dotenv

      - name: Investigate POTUS Tournament
        run: |
          python3 << 'EOF'
          import os
          import asyncio
          os.environ['GITHUB_ACTIONS'] = 'true'

          async def investigate_potus_tournament():
              from forecasting_tools import MetaculusApi, ApiFilter

              print("🔍 INVESTIGATING POTUS TOURNAMENT ACCESS")
              print("=" * 50)

              # Test different ways to access POTUS Predictions tournament
              potus_tournament_ids = [
                  "POTUS-predictions",
                  "potus-predictions",
                  "potus_predictions",
                  "POTUS_predictions",
                  "POTUS",
                  "potus"
              ]

              for tournament_id in potus_tournament_ids:
                  print(f"\\n🔍 Trying tournament ID: '{tournament_id}'")
                  try:
                      # Method 1: get_all_open_questions_from_tournament
                      questions = MetaculusApi.get_all_open_questions_from_tournament(tournament_id)
                      print(f"✅ SUCCESS: Found {len(questions)} questions")

                      if questions:
                          q = questions[0]
                          print(f"   Sample question: {q.question_text[:80]}...")
                          print(f"   URL: {q.page_url}")
                          print(f"   ID: {q.id}")

                          # Check if it's our target question
                          if q.id == 39988:
                              print(f"   🎯 FOUND TARGET QUESTION 39988!")

                          # Show first few questions
                          for i, q in enumerate(questions[:3]):
                              print(f"   {i+1}. {q.question_text[:60]}... (ID: {q.id})")

                  except Exception as e:
                      print(f"❌ Failed: {e}")

              # Test 2: Try using ApiFilter with tournament parameter
              print(f"\\n🔍 Trying ApiFilter with tournament parameter...")
              for tournament_id in ["POTUS-predictions", "potus-predictions"]:
                  try:
                      api_filter = ApiFilter(
                          statuses=["open"],
                          tournaments=[tournament_id],
                          number_of_questions=10
                      )
                      questions = await MetaculusApi.get_questions_matching_filter(api_filter)
                      print(f"✅ ApiFilter SUCCESS with '{tournament_id}': {len(questions)} questions")

                      for q in questions[:3]:
                          print(f"   - {q.question_text[:60]}... (ID: {q.id})")
                          if q.id == 39988:
                              print(f"     🎯 FOUND TARGET QUESTION 39988!")

                  except Exception as e:
                      print(f"❌ ApiFilter failed with '{tournament_id}': {e}")

              # Test 3: Try accessing the specific question directly and examine its attributes
              print(f"\\n🔍 Examining question 39988 attributes...")
              try:
                  # Try different access methods for question 39988
                  try:
                      q = await MetaculusApi.get_question_by_url("https://www.metaculus.com/questions/39988/")
                      print(f"✅ get_question_by_url SUCCESS")
                  except:
                      try:
                          q = MetaculusApi.get_question_by_post_id(39988)
                          print(f"✅ get_question_by_post_id SUCCESS")
                      except:
                          print(f"❌ Cannot access question 39988 directly")
                          return

                  print(f"   Question: {q.question_text[:80]}...")
                  print(f"   URL: {q.page_url}")
                  print(f"   Type: {type(q).__name__}")

                  # Look for tournament-related attributes
                  tournament_attrs = []
                  for attr in dir(q):
                      if not attr.startswith('_') and not callable(getattr(q, attr)):
                          if any(keyword in attr.lower() for keyword in ['tournament', 'series', 'community', 'group']):
                              value = getattr(q, attr)
                              if value:
                                  tournament_attrs.append(f"{attr}: {value}")

                  if tournament_attrs:
                      print(f"   Tournament attributes:")
                      for attr in tournament_attrs:
                              print(f"     - {attr}")
                  else:
                      print(f"   No tournament attributes found")

                  # Check page_url for tournament info
                  if 'tournament' in q.page_url.lower():
                      print(f"   Tournament in URL: {q.page_url}")

              except Exception as e:
                  print(f"❌ Question 39988 examination failed: {e}")

          asyncio.run(investigate_potus_tournament())
          EOF

    env:
      GITHUB_ACTIONS: "true"
      METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}