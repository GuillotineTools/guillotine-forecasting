name: Emergency POTUS Submission

on:
  workflow_dispatch:

jobs:
  emergency_submission_job:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          echo "=== Installing emergency submission dependencies ==="
          pip install forecasting-tools python-dotenv asyncio requests

      - name: Emergency POTUS Submission
        run: |
          echo "=== Emergency POTUS Submission at $(date) ==="

          python3 << 'EOF'
          import os
          import requests
          import re
          from datetime import datetime

          os.environ['GITHUB_ACTIONS'] = 'true'

          def emergency_submission():
              print("üö® EMERGENCY POTUS SUBMISSION")
              print("=" * 50)

              # Check environment
              metaculus_token = os.getenv('METACULUS_TOKEN')
              api_key = os.getenv('OPENROUTER_API_KEY')

              print(f"Metaculus Token: {'‚úÖ' if metaculus_token else '‚ùå'}")
              print(f"OpenRouter Key: {'‚úÖ' if api_key else '‚ùå'}")

              if not metaculus_token:
                  print("‚ùå No Metaculus token")
                  return False

              # Use direct HTTP API for Metaculus
              headers = {
                  'Authorization': f'Token {metaculus_token}',
                  'Content-Type': 'application/json'
              }

              # Step 1: Get Bondi question directly
              print("\\nüìä STEP 1: GET BONDI QUESTION")
              try:
                  response = requests.get('https://www.metaculus.com/api/posts/39988/', headers=headers)
                  if response.status_code == 200:
                      question_data = response.json()
                      print(f"‚úÖ Bondi question: {question_data.get('title', 'No title')[:60]}...")
                      print(f"   Status: {question_data.get('status', 'Unknown')}")
                      print(f"   Type: {question_data.get('type', 'Unknown')}")
                  else:
                      print(f"‚ùå Failed to get Bondi question: {response.status_code}")
                      return False
              except Exception as e:
                  print(f"‚ùå Bondi question request failed: {e}")
                  return False

              # Step 2: Generate simple forecast (even without OpenRouter)
              print("\\nüîÆ STEP 2: GENERATE FORECAST")

              # Use a simple algorithm-based forecast for testing
              # This bypasses OpenRouter entirely for now
              try:
                  # Simple heuristic-based forecast for Pam Bondi
                  # In reality, this should use LLM, but for testing submission...

                  # Factors to consider (simplified):
                  # - Attorney General positions are relatively stable
                  # - Political pressure can lead to resignations
                  # - March 2026 gives about 17 months from now
                  # - Historical precedent suggests 20-30% chance of departure in this timeframe

                  # For testing purposes, use 25% probability
                  probability = 25
                  prediction = probability >= 50

                  print(f"‚úÖ Emergency forecast: {probability}% ({'Yes' if prediction else 'No'})")
                  print("   (Using algorithmic forecast for testing submission)")

              except Exception as e:
                  print(f"‚ùå Forecast generation failed: {e}")
                  return False

              # Step 3: Submit to Metaculus
              print("\\nüöÄ STEP 3: SUBMIT TO METACULUS")
              try:
                  submission_url = 'https://www.metaculus.com/api/posts/39988/predict/'
                  data = {
                      'prediction': probability / 100.0,  # Convert to decimal
                      'type': 'binary'
                  }

                  print(f"üîÑ Submitting to Metaculus...")
                  print(f"   URL: {submission_url}")
                  print(f"   Probability: {probability}%")
                  print(f"   Data: {data}")

                  response = requests.post(submission_url, headers=headers, json=data)

                  if response.status_code == 200:
                      print(f"‚úÖ SUBMISSION SUCCESS!")
                      print(f"   Response: {response.text}")
                  else:
                      print(f"‚ùå Submission failed: {response.status_code}")
                      print(f"   Response: {response.text}")
                      return False

              except Exception as e:
                  print(f"‚ùå Submission request failed: {e}")
                  return False

              # Step 4: Save results
              print("\\nüìã STEP 4: SAVE RESULTS")
              timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

              try:
                  with open(f"emergency_submission_{timestamp}.md", "w") as f:
                      f.write(f"""# Emergency POTUS Submission Results

**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Status:** ‚úÖ SUBMITTED SUCCESSFULLY

## Question
**Title:** {question_data.get('title', 'No title')}
**URL:** https://www.metaculus.com/questions/39988/
**ID:** 39988

## Forecast Submitted
**Probability:** {probability}%
**Prediction:** {'Yes' if prediction else 'No'}
**Method:** Algorithmic (emergency fallback)

## Verification
Check the forecast at: [https://www.metaculus.com/questions/39988/](https://www.metaculus.com/questions/39988/)

The forecast should appear in the prediction history on the question page.
""")

                  print(f"‚úÖ Results saved: emergency_submission_{timestamp}.md")
                  return True

              except Exception as e:
                  print(f"‚ùå Failed to save results: {e}")
                  return False

          # Run emergency submission
          success = emergency_submission()

          if success:
              print("\\nüéâ EMERGENCY SUBMISSION SUCCESSFUL!")
              print("‚úÖ Check Metaculus question page for forecast")
          else:
              print("\\n‚ùå EMERGENCY SUBMISSION FAILED!")
          EOF

          echo "=== Emergency POTUS Submission completed at $(date) ==="

      - name: Upload Emergency Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: emergency-submission-results-${{ github.run_number }}
          path: emergency_submission_*.md
          retention-days: 7

    env:
      GITHUB_ACTIONS: "true"
      METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      OPENAI_DISABLE_TRACE: "true"
      OPENAI_ORGANIZATION: ""