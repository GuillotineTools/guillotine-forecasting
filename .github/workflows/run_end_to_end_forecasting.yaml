name: End-to-End Forecasting with Tested Models

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *" # Every 6 hours

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  forecast_job:
    runs-on: ubuntu-latest
    timeout-minutes: 20 # 20 minute timeout to ensure completion

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Set timezone to JST
        run: |
          sudo timedatectl set-timezone Asia/Tokyo
          echo "Timezone set to: $(date)"

      - name: Run end-to-end forecasting with tested models
        run: |
          echo "=== Starting End-to-End Forecasting at $(date) ==="
          echo "Using tested fallback models with rate limiting"
          echo "Expected completion time: ~15 minutes"
          echo ""

          # Set rate limiting environment variables
          export FORECAST_RATE_LIMIT_DELAY=3
          export CONCURRENT_QUESTION_LIMIT=1
          export LLM_CONCURRENT_LIMIT=2

          # Run tournament mode with the tested fallback models
          poetry run python main.py --mode tournament || echo "Tournament mode completed with some issues, continuing..."

          echo "=== Forecasting completed at $(date) ==="
        env:
          GITHUB_ACTIONS: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          PERSONAL_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          LITELLM_OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          EXA_API_KEY: ${{ secrets.EXA_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ASKNEWS_CLIENT_ID: ${{ secrets.ASKNEWS_CLIENT_ID }}
          ASKNEWS_SECRET: ${{ secrets.ASKNEWS_SECRET }}
          # Email notification settings
          NOTIFICATION_SENDER_EMAIL: ${{ secrets.NOTIFICATION_SENDER_EMAIL }}
          NOTIFICATION_SENDER_PASSWORD: ${{ secrets.NOTIFICATION_SENDER_PASSWORD }}
          NOTIFICATION_RECIPIENT_EMAIL: ${{ secrets.NOTIFICATION_RECIPIENT_EMAIL }}
          NOTIFICATION_SMTP_SERVER: ${{ secrets.NOTIFICATION_SMTP_SERVER || 'smtp.gmail.com' }}
          NOTIFICATION_SMTP_PORT: ${{ secrets.NOTIFICATION_SMTP_PORT || '587' }}
          # ntfy notification settings
          NTFY_TOPIC: ${{ secrets.NTFY_TOPIC || 'metaculus-bot-jsgle' }}
          # Disable OpenAI tracing to prevent API key errors
          OPENAI_DISABLE_TRACE: "true"
          OPENAI_ORGANIZATION: ""
          # Rate limiting settings
          FORECAST_RATE_LIMIT_DELAY: "3"
          CONCURRENT_QUESTION_LIMIT: "1"
          LLM_CONCURRENT_LIMIT: "2"

      - name: Upload comprehensive forecast outputs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: end-to-end-forecast-outputs-${{ github.run_number }}
          path: forecastoutput_*.md
          retention-days: 30

      - name: Upload forecast analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: forecast-analysis-${{ github.run_number }}
          path: |
            model_test_results/
            outputs/
          retention-days: 30