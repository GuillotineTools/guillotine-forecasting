name: Comprehensive API Test

on:
  workflow_dispatch:

jobs:
  comprehensive_api_test_job:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          echo "=== Installing comprehensive test dependencies ==="
          pip install forecasting-tools litellm python-dotenv asyncio

      - name: Comprehensive API Test
        run: |
          echo "=== Comprehensive API Test at $(date) ==="

          python3 << 'EOF'
          import os
          import asyncio
          from datetime import datetime

          os.environ['GITHUB_ACTIONS'] = 'true'

          async def comprehensive_test():
              print("üîç COMPREHENSIVE API TEST")
              print("=" * 50)

              # Test 1: Environment variables
              print("\nüìã STEP 1: ENVIRONMENT VARIABLES")
              api_key = os.getenv('OPENROUTER_API_KEY')
              metaculus_token = os.getenv('METACULUS_TOKEN')

              print(f"OpenRouter API Key: {'‚úÖ Found' if api_key else '‚ùå Missing'}")
              print(f"Metaculus Token: {'‚úÖ Found' if metaculus_token else '‚ùå Missing'}")

              if api_key:
                  print(f"OpenRouter Key length: {len(api_key)}")
                  print(f"OpenRouter Key format: {api_key[:10]}...{api_key[-10:] if len(api_key) > 20 else api_key}")

              # Test 2: OpenRouter API
              print("\nü§ñ STEP 2: OPENROUTER API TEST")
              if api_key:
                  try:
                      from litellm import acompletion

                      print("üîÑ Testing OpenRouter with basic model...")
                      response = await acompletion(
                          model="openrouter/deepseek/deepseek-chat",
                          messages=[{"role": "user", "content": "Respond with exactly: 'API Test Success'"}],
                          api_key=api_key,
                          timeout=30
                      )
                      print(f"‚úÖ OpenRouter SUCCESS: {response.choices[0].message.content}")
                      openrouter_working = True
                  except Exception as e:
                      print(f"‚ùå OpenRouter FAILED: {e}")
                      openrouter_working = False
              else:
                  print("‚ùå Cannot test OpenRouter - no API key")
                  openrouter_working = False

              # Test 3: Metaculus API
              print("\nüìä STEP 3: METACULUS API TEST")
              if metaculus_token:
                  try:
                      from forecasting_tools import MetaculusApi

                      print("üîÑ Testing Metaculus API access...")
                      # Try filter access first (simpler)
                      from forecasting_tools import ApiFilter
                      f = ApiFilter(statuses=["open"], number_of_questions=1)
                      questions = await MetaculusApi.get_questions_matching_filter(f)
                      print(f"‚úÖ Metaculus SUCCESS: {len(questions)} questions retrieved")
                      metaculus_working = True
                  except Exception as e:
                      print(f"‚ùå Metaculus FAILED: {e}")
                      metaculus_working = False
              else:
                  print("‚ùå Cannot test Metaculus - no token")
                  metaculus_working = False

              # Test 4: Bondi Question Access
              print("\nüéØ STEP 4: BONDI QUESTION TEST")
              if metaculus_working:
                  try:
                      print("üîÑ Accessing Bondi question...")
                      bondi_q = await MetaculusApi.get_question_by_url("https://www.metaculus.com/questions/39988/")
                      print(f"‚úÖ Bondi question SUCCESS: {bondi_q.question_text[:60]}...")
                      print(f"   Status: {bondi_q.status}")
                      print(f"   Type: {type(bondi_q).__name__}")
                      bondi_working = True
                  except Exception as e:
                      print(f"‚ùå Bondi question FAILED: {e}")
                      bondi_working = False
              else:
                  print("‚ùå Cannot test Bondi question - Metaculus API not working")
                  bondi_working = False

              # Test 5: Simple Forecast Generation (if APIs working)
              print("\nüîÆ STEP 5: FORECAST GENERATION TEST")
              if openrouter_working and bondi_working:
                  try:
                      from fallback_llm import create_forecasting_fallback_llm

                      print("üîÑ Creating forecast LLM...")
                      forecaster = create_forecasting_fallback_llm(
                          api_key=api_key,
                          temperature=0.5,
                          timeout=30,
                          allowed_tries=1
                      )

                      print("üîÑ Generating test forecast...")
                      prompt = f"Simple forecast: {bondi_q.question_text}\\n\\nGive probability as 'XX% - [Yes/No]'"
                      forecast = await forecaster.invoke(prompt)
                      print(f"‚úÖ Forecast generation SUCCESS: {forecast[:100]}...")
                      forecast_working = True
                  except Exception as e:
                      print(f"‚ùå Forecast generation FAILED: {e}")
                      forecast_working = False
              else:
                  print("‚ùå Cannot test forecast generation - APIs not working")
                  forecast_working = False

              # Summary
              print("\nüìã SUMMARY")
              print(f"OpenRouter API: {'‚úÖ' if openrouter_working else '‚ùå'}")
              print(f"Metaculus API: {'‚úÖ' if metaculus_working else '‚ùå'}")
              print(f"Bondi Question: {'‚úÖ' if bondi_working else '‚ùå'}")
              print(f"Forecast Generation: {'‚úÖ' if forecast_working else '‚ùå'}")

              # Final result
              all_working = openrouter_working and metaculus_working and bondi_working and forecast_working
              print(f"\nüéØ OVERALL: {'‚úÖ ALL SYSTEMS WORKING' if all_working else '‚ùå SOME SYSTEMS FAILING'}")

              return all_working

          # Run the comprehensive test
          success = asyncio.run(comprehensive_test())

          if success:
              print("\nüéâ READY FOR SUBMISSION TEST!")
          else:
              print("\n‚ùå NEED TO FIX ISSUES BEFORE SUBMISSION")
          EOF

          echo "=== Comprehensive API Test completed at $(date) ==="

    env:
      GITHUB_ACTIONS: "true"
      METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      OPENAI_DISABLE_TRACE: "true"
      OPENAI_ORGANIZATION: ""