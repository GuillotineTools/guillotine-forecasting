name: UV Dependency Test

on:
  push:
    branches: [ main ]

jobs:
  uv_test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Test uv installation and dependencies
        run: |
          echo "=== Testing UV Setup ==="
          uv --version

          echo "=== Creating virtual environment ==="
          uv venv
          source .venv/bin/activate

          echo "=== Installing forecasting-tools ==="
          uv pip install forecasting-tools python-dotenv

          echo "=== Testing imports ==="
          python -c "
import sys
print(f'Python version: {sys.version}')

try:
    import forecasting_tools
    print('✅ forecasting-tools imported successfully')

    from forecasting_tools import MetaculusApi
    print('✅ MetaculusApi imported successfully')

    from forecasting_tools.helpers.metaculus_api import ApiFilter
    print('✅ ApiFilter imported successfully')

except Exception as e:
    print(f'❌ Import failed: {e}')
    import traceback
    traceback.print_exc()
"

      - name: Test API call
        run: |
          echo "=== Testing API connectivity ==="
          source .venv/bin/activate
          python -c "
import os
import asyncio
from forecasting_tools.helpers.metaculus_api import ApiFilter

async def test_api():
    try:
        from forecasting_tools import MetaculusApi
        print('✅ API import successful')

        # Test with minimal query
        questions = await MetaculusApi.get_questions_matching_filter(
            ApiFilter(allowed_statuses=['open'], number_of_questions=1)
        )
        print(f'✅ API call successful: found {len(questions)} questions')

        if questions:
            q = questions[0]
            print(f'Question: {q.question_text[:50]}...')
            print(f'ID: {q.id}')
            print(f'Type: {type(q)}')

            # Check for tournament info
            if hasattr(q, 'tournament'):
                print(f'Tournament: {q.tournament}')
            if hasattr(q, 'page_url'):
                print(f'URL: {q.page_url}')

        return True

    except Exception as e:
        print(f'❌ API test failed: {e}')
        import traceback
        traceback.print_exc()
        return False

result = asyncio.run(test_api())
if result:
    print('🎉 UV SETUP SUCCESSFUL - API is working!')
else:
    print('❌ UV SETUP FAILED')
"

      - name: Create success file
        run: |
          echo "=== UV Setup Complete ==="
          source .venv/bin/activate
          echo "UV dependency setup successful!" > uv_test_success.txt
          echo "Date: $(date)" >> uv_test_success.txt
          echo "Python version: $(python --version)" >> uv_test_success.txt
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add uv_test_success.txt
          git commit -m "UV setup test successful - dependencies installed and API working"
          git push