name: Save POTUS Tournament Investigation

on:
  workflow_dispatch:

jobs:
  save_potus_investigation_job:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install forecasting-tools python-dotenv

      - name: Save POTUS Investigation Results
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          python3 << 'EOF'
          import os
          import asyncio
          from datetime import datetime
          os.environ['GITHUB_ACTIONS'] = 'true'

          async def save_potus_investigation():
              from forecasting_tools import MetaculusApi, ApiFilter

              print("🔍 SAVING POTUS TOURNAMENT INVESTIGATION")
              print("=" * 50)

              results = []
              results.append(f"# POTUS Tournament Investigation Results")
              results.append(f"")
              results.append(f"**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
              results.append(f"")
              results.append(f"**Goal:** Find how to access POTUS Predictions tournament questions")
              results.append(f"")

              # Test different tournament IDs
              potus_tournament_ids = [
                  "POTUS-predictions",
                  "potus-predictions",
                  "potus_predictions",
                  "POTUS_predictions",
                  "POTUS",
                  "potus"
              ]

              results.append(f"## Testing Tournament IDs")
              results.append(f"")

              success_found = False

              for tournament_id in potus_tournament_ids:
                  results.append(f"### Testing: '{tournament_id}'")
                  try:
                      questions = MetaculusApi.get_all_open_questions_from_tournament(tournament_id)
                      results.append(f"✅ **SUCCESS**: Found {len(questions)} questions")
                      success_found = True

                      if questions:
                          results.append(f"**Sample questions:**")
                          for i, q in enumerate(questions[:5]):
                              results.append(f"{i+1}. {q.question_text[:80]}...")
                              results.append(f"   - URL: {q.page_url}")
                              results.append(f"   - ID: {q.id}")
                              if q.id == 39988:
                                  results.append(f"   - 🎯 **THIS IS THE TARGET QUESTION!**")
                              results.append(f"")

                  except Exception as e:
                      results.append(f"❌ **Failed**: {e}")
                  results.append(f"")

              # Test ApiFilter method
              results.append(f"## Testing ApiFilter Method")
              results.append(f"")

              for tournament_id in ["POTUS-predictions", "potus-predictions"]:
                  results.append(f"### ApiFilter with: '{tournament_id}'")
                  try:
                      api_filter = ApiFilter(
                          statuses=["open"],
                          tournaments=[tournament_id],
                          number_of_questions=10
                      )
                      questions = await MetaculusApi.get_questions_matching_filter(api_filter)
                      results.append(f"✅ **ApiFilter SUCCESS**: {len(questions)} questions")
                      success_found = True

                      for q in questions[:3]:
                          results.append(f"- {q.question_text[:60]}... (ID: {q.id})")
                          if q.id == 39988:
                              results.append(f"  🎯 **FOUND TARGET QUESTION!**")

                  except Exception as e:
                      results.append(f"❌ **ApiFilter Failed**: {e}")
                  results.append(f"")

              # Test direct question access
              results.append(f"## Testing Direct Question Access (39988)")
              results.append(f"")

              try:
                  q = await MetaculusApi.get_question_by_url("https://www.metaculus.com/questions/39988/")
                  results.append(f"✅ **get_question_by_url SUCCESS**")
                  results.append(f"Question: {q.question_text[:100]}...")
                  results.append(f"URL: {q.page_url}")
                  results.append(f"Type: {type(q).__name__}")

                  # Check tournament attributes
                  tournament_info = []
                  for attr in dir(q):
                      if not attr.startswith('_') and not callable(getattr(q, attr)):
                          if any(keyword in attr.lower() for keyword in ['tournament', 'series', 'community', 'group']):
                              value = getattr(q, attr)
                              if value:
                                  tournament_info.append(f"{attr}: {value}")

                  if tournament_info:
                      results.append(f"**Tournament attributes:**")
                      for attr in tournament_info:
                          results.append(f"- {attr}")
                  else:
                      results.append(f"No tournament attributes found")

              except Exception as e:
                  results.append(f"❌ **Direct access failed**: {e}")

              results.append(f"")
              results.append(f"## Summary")
              results.append(f"")
              if success_found:
                  results.append(f"✅ **SUCCESS**: Found working method to access POTUS tournament questions!")
              else:
                  results.append(f"❌ **NO SUCCESS**: Could not access POTUS tournament questions with tested methods")
                  results.append(f"")
                  results.append(f"**Recommendations:**")
                  results.append(f"1. Tournament might use different ID format")
                  results.append(f"2. Might need to access via community endpoint")
                  results.append(f"3. Question 39988 might be resolved/closed")

              # Save results
              timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
              filename = f"potus_tournament_investigation_{timestamp}.md"

              with open(filename, 'w') as f:
                  f.write('\\n'.join(results))

              print(f"✅ Investigation saved to {filename}")

          asyncio.run(save_potus_investigation())
          EOF

          git add potus_tournament_investigation_*.md
          git commit -m "Auto-commit: POTUS tournament investigation results" || echo "No changes to commit"
          git push || echo "Push failed"

    env:
      GITHUB_ACTIONS: "true"
      METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}