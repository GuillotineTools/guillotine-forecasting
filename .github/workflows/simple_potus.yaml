name: Simple POTUS End-to-End Test

on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *" # runs every 30 minutes

jobs:
  simple_potus_job:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          echo "=== Installing dependencies ==="
          pip install forecasting-tools python-dotenv

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run Simple POTUS Test
        run: |
          echo "=== Starting Simple POTUS Test at $(date) ==="

          # Create simple test that doesn't require API keys for structure verification
          cat > simple_potus_test.py << 'EOF'
          import os
          import asyncio
          from datetime import datetime

          os.environ['GITHUB_ACTIONS'] = 'true'

          async def simple_potus_forecast():
              """Simple POTUS forecast structure test."""
              print("🎯 SIMPLE POTUS FORECAST TEST")
              print("=" * 40)

              # Test API key availability
              api_key = os.getenv('OPENROUTER_API_KEY')
              metaculus_token = os.getenv('METACULUS_TOKEN')

              if not api_key:
                  print("❌ OPENROUTER_API_KEY not configured")
                  return False

              if not metaculus_token:
                  print("❌ METACULUS_TOKEN not configured")
                  return False

              print("✅ API keys configured")

              # Test Metaculus API connection
              try:
                  from forecasting_tools import MetaculusApi, ApiFilter

                  print("🔍 Testing Metaculus API connection...")
                  questions = await MetaculusApi.get_questions_matching_filter(
                      ApiFilter(allowed_statuses=["open"], number_of_questions=5)
                  )
                  print(f"✅ Successfully fetched {len(questions)} questions")

                  # Look for POTUS questions
                  potus_questions = [q for q in questions if 'potus' in str(q.page_url).lower() or 'bondi' in str(q.page_url).lower()]

                  if potus_questions:
                      print(f"✅ Found {len(potus_questions)} POTUS-related questions")
                      question = potus_questions[0]
                      print(f"📋 Question: {question.question_text[:100]}...")

                      # Create simple output file
                      timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                      output_file = f"simple_potus_test_{timestamp}.md"

                      content = f"""# Simple POTUS Test Output

                      **Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                      **Question:** {question.question_text}
                      **URL:** {question.page_url}
                      **Question ID:** {question.id}

                      ## Test Results:
                      ✅ API keys configured
                      ✅ Metaculus API connection successful
                      ✅ POTUS question found
                      ✅ Output file generation working

                      **🎯 SIMPLE POTUS TEST COMPLETED SUCCESSFULLY!**
                      """

                      with open(output_file, 'w') as f:
                          f.write(content)

                      print(f"✅ Output saved to: {output_file}")
                      return True
                  else:
                      print("❌ No POTUS questions found in sample")
                      return False

              except Exception as e:
                  print(f"❌ Metaculus API test failed: {e}")
                  return False

          if __name__ == "__main__":
              success = asyncio.run(simple_potus_forecast())
              if success:
                  print("\\n🎉 SIMPLE POTUS TEST SUCCESSFUL!")
              else:
                  print("\\n❌ SIMPLE POTUS TEST FAILED!")
          EOF

          python simple_potus_test.py

          echo "=== Simple POTUS Test completed at $(date) ==="

      - name: Commit and Push Results
        if: always()
        run: |
          git add --all
          git add simple_potus_test_*.md

          if git diff --staged --quiet; then
            echo "No new outputs to commit"
          else
            echo "=== Committing Simple POTUS Test Results ==="
            git commit -m "Auto-commit: Simple POTUS Test Results

            📊 Simple POTUS forecasting structure test
            🤖 API connectivity verification
            🎯 Question discovery working
            📋 Output generation functional

            🤖 Generated with [Claude Code](https://claude.com/claude-code)

            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
            echo "=== Results committed and pushed ==="
          fi

      - name: Upload Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: simple-potus-results-${{ github.run_number }}
          path: simple_potus_test_*.md
          retention-days: 7

    env:
      GITHUB_ACTIONS: "true"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      OPENAI_DISABLE_TRACE: "true"
      OPENAI_ORGANIZATION: ""