name: Debug POTUS Access

on:
  workflow_dispatch:

jobs:
  debug_potus_access_job:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install forecasting-tools python-dotenv

      - name: Debug POTUS Access
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          python3 << 'EOF'
          import os
          import asyncio
          from datetime import datetime
          os.environ['GITHUB_ACTIONS'] = 'true'

          async def debug_potus_access():
              from forecasting_tools import MetaculusApi, ApiFilter

              print("🔍 DEBUGGING POTUS ACCESS")
              print("=" * 50)

              results = []
              results.append(f"# POTUS Access Debug Results")
              results.append(f"")
              results.append(f"**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
              results.append(f"")

              # Test 1: Direct tournament access
              results.append(f"## Test 1: Direct POTUS-predictions Tournament Access")
              results.append(f"")

              try:
                  questions = MetaculusApi.get_all_open_questions_from_tournament("POTUS-predictions")
                  results.append(f"✅ **SUCCESS**: Found {len(questions)} questions")

                  if questions:
                      results.append(f"**First 3 questions:**")
                      for i, q in enumerate(questions[:3]):
                          question_text = getattr(q, 'question_text', 'No text')
                          page_url = getattr(q, 'page_url', 'No URL')
                          results.append(f"{i+1}. {question_text[:80]}...")
                          results.append(f"   URL: {page_url}")

                          # Check if this is the Bondi question
                          if 'bondi' in question_text.lower() or 'attorney general' in question_text.lower():
                              results.append(f"   🎯 **FOUND BONDI QUESTION!**")

                      results.append(f"")
                  except Exception as e:
                      results.append(f"❌ **FAILED**: {str(e)}")
                      results.append(f"")

              # Test 2: Check if we can access Bondi question directly
              results.append(f"## Test 2: Direct Bondi Question Access (39988)")
              results.append(f"")

              try:
                  # Try URL method
                  question = await MetaculusApi.get_question_by_url("https://www.metaculus.com/questions/39988/")
                  results.append(f"✅ **URL Access SUCCESS**")
                  results.append(f"Question: {question.question_text[:100]}...")
                  results.append(f"Status: {getattr(question, 'status', 'Unknown')}")
                  results.append(f"")
              except Exception as e:
                  results.append(f"❌ **URL Access Failed**: {str(e)}")
                  results.append(f"")

              # Test 3: Search for Bondi in all questions
              results.append(f"## Test 3: Search for Bondi/Attorney General Questions")
              results.append(f"")

              try:
                  api_filter = ApiFilter(statuses=["open"], number_of_questions=200)
                  all_questions = await MetaculusApi.get_questions_matching_filter(api_filter)
                  results.append(f"✅ Retrieved {len(all_questions)} open questions")

                  bondi_questions = []
                  for q in all_questions:
                      question_text = getattr(q, 'question_text', '').lower()
                      if 'bondi' in question_text or 'attorney general' in question_text:
                          bondi_questions.append(q)

                  if bondi_questions:
                      results.append(f"✅ **Found {len(bondi_questions)} Bondi/Attorney General questions:**")
                      for i, q in enumerate(bondi_questions):
                          results.append(f"{i+1}. {q.question_text[:80]}...")
                          results.append(f"   URL: {q.page_url}")
                          results.append(f"   ID: {getattr(q, 'id', 'Unknown')}")
                  else:
                      results.append(f"❌ **No Bondi/Attorney General questions found**")

                  results.append(f"")
              except Exception as e:
                  results.append(f"❌ **Search Failed**: {str(e)}")
                  results.append(f"")

              # Test 4: Check what tournaments are actually available
              results.append(f"## Test 4: Available Tournaments Check")
              results.append(f"")

              # Try a few known working tournaments
              known_tournaments = [32813, "minibench", 32828]

              for t_id in known_tournaments:
                  try:
                      questions = MetaculusApi.get_all_open_questions_from_tournament(t_id)
                      results.append(f"✅ Tournament {t_id}: {len(questions)} questions")
                  except Exception as e:
                      results.append(f"❌ Tournament {t_id}: Failed - {str(e)[:50]}...")

              results.append(f"")
              results.append(f"## Summary")
              results.append(f"")

              # Save results
              timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
              filename = f"potus_debug_results_{timestamp}.md"

              with open(filename, 'w') as f:
                  f.write('\\n'.join(results))

              print(f"✅ Debug results saved to {filename}")

          asyncio.run(debug_potus_access())
          EOF

          git add potus_debug_results_*.md
          git commit -m "Auto-commit: POTUS access debug results" || echo "No changes to commit"
          git push || echo "Push failed"

    env:
      GITHUB_ACTIONS: "true"
      METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}