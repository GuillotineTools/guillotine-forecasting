name: POTUS Predictions End-to-End Forecasting

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *" # runs every 6 hours

# Add concurrency group to prevent parallel runs
concurrency:
  group: potus-forecasting
  cancel-in-progress: false

jobs:
  potus_forecast_job:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Setup repository
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Need full history for git operations

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Install uv for fast dependency management
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      # Set up environment and dependencies
      - name: Set up environment and install dependencies
        run: |
          echo "=== Setting up POTUS forecasting environment ==="
          uv venv
          source .venv/bin/activate

          echo "=== Installing dependencies with uv ==="
          uv pip install forecasting-tools python-dotenv asyncio

          echo "=== Environment setup complete ==="

      # Configure Git for output commits
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          echo "=== Git configured for output commits ==="

      # Run POTUS tournament forecasting
      - name: Run POTUS End-to-End Forecasting
        run: |
          source .venv/bin/activate
          echo "=== Starting POTUS End-to-End Forecasting at $(date) ==="
          echo "=== Using enhanced fallback LLM system ==="

          # Run the complete POTUS multiforecaster process
          python test_potus_tournament.py

          echo "=== POTUS forecasting completed at $(date) ==="

      # Commit and push outputs to repository
      - name: Commit and Push Outputs
        if: always()
        run: |
          git add --all
          git add outputs/
          git add potus_multiforecaster_*.md

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No new outputs to commit"
          else
            echo "=== Committing new forecast outputs ==="
            git commit -m "$(cat <<'EOF'
            Auto-commit: POTUS End-to-End Forecasting Results

            ðŸ“Š Complete multiforecaster process with research â†’ forecasts â†’ synthesis
            ðŸ¤– Enhanced fallback LLM system with detailed model logging
            ðŸŽ¯ Real POTUS Predictions tournament questions processed
            ðŸ“‹ Comprehensive reasoning and analysis documentation

            ðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)

            Co-Authored-By: Claude <noreply@anthropic.com>
            EOF
            )"
            git push
            echo "=== Outputs committed and pushed to repository ==="
          fi

      # List generated files for verification
      - name: List Generated Outputs
        if: always()
        run: |
          echo "=== Generated POTUS forecasting outputs ==="
          ls -la potus_multiforecaster_*.md 2>/dev/null || echo "No POTUS multiforecaster files found"
          ls -la outputs/ 2>/dev/null || echo "No outputs directory found"
          echo "=== All markdown files in repository ==="
          find . -name "*.md" -newer .git/COMMIT_EDITMSG -type f 2>/dev/null || echo "No new markdown files found"

      # Upload artifacts for GitHub Actions UI
      - name: Upload POTUS Forecast Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: potus-forecast-results-${{ github.run_number }}
          path: |
            potus_multiforecaster_*.md
            outputs/
          retention-days: 30

      # Environment variables for API keys
      env:
        GITHUB_ACTIONS: "true"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        PERSONAL_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        LITELLM_OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        # Disable OpenAI tracing to prevent API key errors
        OPENAI_DISABLE_TRACE: "true"
        OPENAI_ORGANIZATION: ""