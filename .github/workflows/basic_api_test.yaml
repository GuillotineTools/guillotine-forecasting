name: Basic API Test

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

jobs:
  basic_api_test_job:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install forecasting-tools python-dotenv

      - name: Basic API Test
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          echo "=== Starting Basic API Test at $(date) ==="

          python3 -c "
import os
import asyncio
from datetime import datetime
os.environ['GITHUB_ACTIONS'] = 'true'

async def basic_test():
    try:
        from forecasting_tools import MetaculusApi, ApiFilter
        print('✅ forecasting-tools imported successfully')

        # Test 1: Get general open questions
        print('\\nTest 1: Getting open questions...')
        api_filter = ApiFilter(statuses=['open'], number_of_questions=10)
        questions = await MetaculusApi.get_questions_matching_filter(api_filter)
        print(f'✅ Got {len(questions)} open questions')

        # Look for Bondi question
        found_bondi = False
        for q in questions:
            if 'bondi' in str(q.question_text).lower():
                print(f'✅ FOUND BONDI: {q.question_text[:60]}...')
                found_bondi = True
                break

        if not found_bondi:
            print('❌ No Bondi question found in first 10 open questions')

        # Test 2: Try POTUS tournament
        print('\\nTest 2: Trying POTUS-predictions tournament...')
        try:
            potus_questions = MetaculusApi.get_all_open_questions_from_tournament('POTUS-predictions')
            print(f'✅ GOT {len(potus_questions)} POTUS questions')
            if potus_questions:
                print(f'First POTUS question: {potus_questions[0].question_text[:60]}...')
        except Exception as e:
            print(f'❌ POTUS tournament failed: {e}')

        # Test 3: Try Bondi question directly
        print('\\nTest 3: Trying Bondi question directly...')
        try:
            bondi_q = await MetaculusApi.get_question_by_url('https://www.metaculus.com/questions/39988/')
            print(f'✅ GOT BONDI: {bondi_q.question_text[:60]}...')
            print(f'Status: {getattr(bondi_q, \"status\", \"unknown\")}')
        except Exception as e:
            print(f'❌ Bondi question failed: {e}')

        # Save results
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        with open(f'basic_api_test_{timestamp}.md', 'w') as f:
            f.write(f'# Basic API Test Results\\n')
            f.write(f'**Date:** {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}\\n')
            f.write(f'**Open questions:** {len(questions)}\\n')
            f.write(f'**Bondi found:** {found_bondi}\\n')
            f.write(f'**Status:** Test completed\\n')

        print(f'\\n✅ Results saved to basic_api_test_{timestamp}.md')

    except Exception as e:
        print(f'❌ Basic test failed: {e}')
        import traceback
        traceback.print_exc()

asyncio.run(basic_test())
"

          git add basic_api_test_*.md
          git commit -m "Auto-commit: basic API test results" || echo "No changes"
          git push || echo "Push failed"