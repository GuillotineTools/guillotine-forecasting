name: Verify POTUS Submission

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *" # every 15 minutes

jobs:
  verify_submission_job:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          echo "=== Installing submission verification system ==="
          pip install forecasting-tools python-dotenv asyncio

      - name: Verify POTUS Submission
        run: |
          echo "=== Verifying POTUS Forecast Submission at $(date) ==="

          python3 << 'EOF'
          import os
          import asyncio
          import re
          from datetime import datetime

          os.environ['GITHUB_ACTIONS'] = 'true'

          async def verify_submission():
              print("🔍 VERIFYING POTUS SUBMISSION")
              print("=" * 50)

              # Check environment
              api_key = os.getenv('OPENROUTER_API_KEY')
              metaculus_token = os.getenv('METACULUS_TOKEN')

              if not api_key or not metaculus_token:
                  print("❌ Missing API keys")
                  return False

              print("✅ API keys configured")

              try:
                  from forecasting_tools import MetaculusApi, BinaryQuestion
                  from fallback_llm import create_forecasting_fallback_llm

                  print("✅ Modules imported successfully")

                  # Get Bondi question
                  print("\\n📊 GETTING BONDI QUESTION")
                  try:
                      bondi_question = await MetaculusApi.get_question_by_url("https://www.metaculus.com/questions/39988/")
                      print(f"✅ Found: {bondi_question.question_text[:80]}...")
                      print(f"   Status: {bondi_question.status}")
                      print(f"   Type: {type(bondi_question).__name__}")
                  except Exception as e:
                      print(f"❌ Access failed: {e}")
                      return False

                  # Verify binary and open
                  if not isinstance(bondi_question, BinaryQuestion):
                      print(f"❌ Not binary: {type(bondi_question).__name__}")
                      return False

                  if bondi_question.status != "open":
                      print(f"❌ Not open: {bondi_question.status}")
                      return False

                  # Generate forecast
                  print("\\n🔮 GENERATING FORECAST")
                  forecaster_llm = create_forecasting_fallback_llm(
                      api_key=api_key,
                      temperature=0.5,
                      timeout=60,
                      allowed_tries=2
                  )

                  print(f"✅ Model: {forecaster_llm.model_chain[0]}")

                  prompt = f"""Forecast: {bondi_question.question_text}

          Give probability as "XX% - [Yes/No]" with brief reasoning.
          Focus on realistic assessment of Pam Bondi leaving before March 2026.
          """

                  try:
                      response = await forecaster_llm.invoke(prompt)
                      print(f"✅ Forecast: {response[:100]}...")
                  except Exception as e:
                      print(f"❌ Forecast failed: {e}")
                      return False

                  # Extract and submit
                  print("\\n🚀 SUBMITTING")
                  prob_match = re.search(r'(\\d+)%', response)
                  if prob_match:
                      probability = int(prob_match.group(1))
                      print(f"📊 Probability: {probability}%")
                  else:
                      probability = 50
                      print(f"⚠️  Using fallback: 50%")

                  try:
                      print("🔄 Submitting to Metaculus...")
                      MetaculusApi.post_binary_question_prediction(bondi_question.id, probability / 100.0)
                      print("✅ SUBMISSION SUCCESS!")
                      print(f"   URL: {bondi_question.page_url}")

                      # Save verification
                      timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                      with open(f"verified_submission_{timestamp}.md", "w") as f:
                          f.write(f"# Verified Submission Success\\n\\n**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n**Question:** {bondi_question.question_text}\\n**Probability:** {probability}%\\n**URL:** {bondi_question.page_url}\\n\\n✅ Forecast submitted successfully!\\nCheck at: {bondi_question.page_url}\\n")

                      return True

                  except Exception as e:
                      print(f"❌ Submission failed: {e}")
                      import traceback
                      traceback.print_exc()
                      return False

              except Exception as e:
                  print(f"❌ Verification failed: {e}")
                  import traceback
                  traceback.print_exc()
                  return False

          # Run verification
          success = asyncio.run(verify_submission())
          if success:
              print("\\n🎉 SUBMISSION VERIFICATION SUCCESSFUL!")
              print("✅ Forecast should be visible on Metaculus")
          else:
              print("\\n❌ SUBMISSION VERIFICATION FAILED!")
          EOF

          echo "=== POTUS Submission Verification completed at $(date) ==="

      - name: Upload Verification Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: verification-results-${{ github.run_number }}
          path: verified_submission_*.md
          retention-days: 7

    env:
      GITHUB_ACTIONS: "true"
      METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      OPENAI_DISABLE_TRACE: "true"
      OPENAI_ORGANIZATION: ""